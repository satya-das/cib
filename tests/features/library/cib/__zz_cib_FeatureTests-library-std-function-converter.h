/*
    Generated by cib for ABI compatibility and stability.
    For copyright details refer to the copyright statement of library that contains this file.
*/

#pragma once

#include "__zz_cib_FeatureTests-decl.h"
#include "__zz_cib_FeatureTests-library-default-type-converter.h"

namespace __zz_cib_ {

template <typename R, typename... Args>
class __zz_cib_LibraryTypeToAbiType<std::function<R(Args...)>>
{
  std::function<R(Args...)>& m;

public:
  using Func = std::function<R(Args...)>;
  using Proc = R(__zz_cib_decl*)(void*, __zz_cib_AbiType_t<Args>...);
  struct ProcData
  {
    Proc  proc;
    void* data;
  };

  ProcData convert() const
  {
    auto proc = [](void* data, Args... args) -> R {
      auto& func = *static_cast<Func*>(data);
      return func(args...);
    };

    void* data = static_cast<void*>(&m);

    return ProcData{proc, data};
  }

public:
  __zz_cib_LibraryTypeToAbiType(std::function<R(Args...)>& x)
    : m(x)
  {
  }

  operator ProcData() const
  {
    return convert();
  }
};

/////////////////////////////////////////////////////////////////////////////////////////////

template <typename R, typename... Args>
class __zz_cib_AbiTypeToLibraryType<std::function<R(Args...)>>
{
public:
  using Func = std::function<R(Args...)>;
  using Proc = R(__zz_cib_decl*)(void*, __zz_cib_AbiType_t<Args>...);
  struct ProcData
  {
    Proc  proc;
    void* data;
  };

private:
  ProcData m;

public:
  __zz_cib_AbiTypeToLibraryType(const __zz_cib_AbiType_t<Func>& x)
    : m{x.proc, x.data}
  {
  }

  Func convert() const
  {
    return [m = this->m](Args... args) -> R { return m.proc(m.data, __zz_cib_ToAbiType<Args>(args)...); };
  }

  operator Func() const
  {
    return convert();
  }
};

} // namespace __zz_cib_
