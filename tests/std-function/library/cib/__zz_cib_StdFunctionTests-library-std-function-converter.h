/*
    Generated by cib for ABI compatibility and stability.
    For copyright details refer to the copyright statement of library that contains this file.
*/

#pragma once

#include "__zz_cib_StdFunctionTests-decl.h"
#include "__zz_cib_StdFunctionTests-library-default-type-converter.h"

#include "__zz_cib_StdFunctionTests-std-function-converter-base.h"

namespace __zz_cib_ {

template <typename R, typename... Args>
class __zz_cib_LibraryTypeToAbiType<std::function<R(Args...)>>
{
  using Converter = __zz_cib_StdFuncToAbiType<R, Args...>;
  using AbiType   = typename Converter::AbiType;

  Converter mConverter;

public:
  AbiType convert() const
  {
    return mConverter.convert();
  }

public:
  __zz_cib_LibraryTypeToAbiType(std::function<R(Args...)>& x)
    : mConverter(std::move(x))
  {
  }
  __zz_cib_LibraryTypeToAbiType(std::function<R(Args...)>&& x)
    : mConverter(std::move(x))
  {
  }

  operator AbiType() const
  {
    return convert();
  }
};

template <typename R, typename... Args>
class __zz_cib_LibraryTypeToAbiType<std::function<R(Args...)>&>
{
  using Converter = __zz_cib_StdFuncToAbiType<R, Args...>;
  using AbiType   = typename Converter::AbiType;

  Converter mConverter;

public:
  AbiType convert() const
  {
    return mConverter.convert();
  }

public:
  __zz_cib_LibraryTypeToAbiType(std::function<R(Args...)>& x)
    : mConverter(&x)
  {
  }

  operator AbiType() const
  {
    return convert();
  }
};

template <typename R, typename... Args>
class __zz_cib_LibraryTypeToAbiType<std::function<R(Args...)>&&>
{
  using Converter = __zz_cib_StdFuncToAbiType<R, Args...>;
  using AbiType   = typename Converter::AbiType;

  Converter mConverter;

public:
  AbiType convert() const
  {
    return mConverter.convert();
  }

public:
  __zz_cib_LibraryTypeToAbiType(std::function<R(Args...)>&& x)
    : mConverter(std::move(x))
  {
  }

  operator AbiType() const
  {
    return convert();
  }
};

/////////////////////////////////////////////////////////////////////////////////////////////

template <typename R, typename... Args>
class __zz_cib_AbiTypeToLibraryType<std::function<R(Args...)>>
{
  using Converter = __zz_cib_AbiTypeToStdFunc<R, Args...>;
  using StdFunc   = typename __zz_cib_StdFuncToAbiType<R, Args...>::StdFunc;
  using AbiType   = typename Converter::AbiType;

  Converter mConverter;

public:
  StdFunc convert()
  {
    return mConverter.getObj();
  }

public:
  __zz_cib_AbiTypeToLibraryType(AbiType x)
    : mConverter(*x)
  {
  }

  operator StdFunc()
  {
    return convert();
  }
};

template <typename R, typename... Args>
class __zz_cib_AbiTypeToLibraryType<std::function<R(Args...)>&>
{
  using Converter = __zz_cib_AbiTypeToStdFunc<R, Args...>;
  using StdFunc   = typename __zz_cib_StdFuncToAbiType<R, Args...>::StdFunc;
  using AbiType   = typename Converter::AbiType;

  Converter mConverter;

public:
  StdFunc& convert()
  {
    return mConverter.getRef();
  }

public:
  __zz_cib_AbiTypeToLibraryType(AbiType x)
    : mConverter(x)
  {
  }

  operator StdFunc&() const
  {
    return convert();
  }
};

template <typename R, typename... Args>
class __zz_cib_AbiTypeToLibraryType<std::function<R(Args...)>&&>
{
  using Converter = __zz_cib_AbiTypeToStdFunc<R, Args...>;
  using StdFunc   = typename __zz_cib_StdFuncToAbiType<R, Args...>::StdFunc;
  using AbiType   = typename Converter::AbiType;

  Converter mConverter;

public:
  StdFunc convert()
  {
    return mConverter.getObj();
  }

public:
  __zz_cib_AbiTypeToLibraryType(AbiType x)
    : mConverter(*x)
  {
  }

  operator StdFunc()
  {
    return convert();
  }
};

} // namespace __zz_cib_
