# Example - C++ Template Classes

Supporting template classes by CIB in ABI compatible and stable way is very interesting because of the fact that an object can only be of a concrete type. So, we only need to export concretized types of the template class. And that we can do in the same way as we export other non-template classes. So, let's consider an example:

**FILE**: examples/0120-template-classes/pub/value.h
!INCLUDECODE "examples/0120-template-classes/pub/value.h" (c++)

This is a simple template class that has one template parameter. Now, suppose if there is no function anywhere in the rest of the SDK headers that has a parameter or return type using this template class `Value`. In that case we do not need to do anything for this template class because no instance of any concretized type of this template class is crossing component boundary. But, consider the case when there are functions that use this template class:

**File**: examples/0120-template-classes/pub/example.h
!INCLUDECODE "examples/0120-template-classes/pub/example.h" (c++)

As we can see that `class A` has methods that has parameters of concretized type of template `class Value`. We have following cases of template class use:
  1. Template parameter is a built-in type, i.e. `int`,
  2. Template parameter is `class Int`, and
  3. Object of `FloatValue` are used as function parameter which is essentially `Value<float>`.

`#1` is to demonstrate how we can support templates instances when built-in type are used as template argument.  
`#2` is for how to support when class objects are used as template argument.  
`#3` is just as a test that even if aliased types using `typedef` or `using` is used they are supported too. This is not actually the capability of CIB architecture but of the CIB tool that can understand such usage and generate the code accordingly.

Just for sake of completeness, below is the definiton of `class Int`:

**File**: examples/0120-template-classes/pub/int.h
!INCLUDECODE "examples/0120-template-classes/pub/int.h" (c++)

Since, there are 3 concretized types of template `class Value` that crosses component boundary, we basically have 3 new classes instead of 1 templated class. So, we need to export those 3 classes instead of exporting `class Value`. Those classes will have exactly same members as the `class Value` but obviously without any template parameter. But CIB's way of exporting classes is to export their `MethodTable` which is then used to reconstruct classes back on the client side. So, below is the library side glue code to export MethodTables of concretized types of template class:

**File**: examples/0120-template-classes/cib/value.h.cpp
!INCLUDECODE "examples/0120-template-classes/cib/value.h.cpp" (c++)

The library side code is very familiar to what we have seen in other cases like [`0010-simple-class`](../0010-simple-class).

Now we need to look what does client side glue code contain to make these types available to clients. To begin with let's have a look at client side header file containing the template class definition. For explanation purpose I have produced below the `diff` of this file with original:

!INCLUDECODE "examples/0120-template-classes/readme-assets/value-diff.diff" (diff)

We see that class definiton is exactly same as original class definition, and the header contains other usual extra inclusions.
But, what we want is that when client code uses something like `Value<int>` or `Value<Int>` the corresponding concretized types on library side should be used instead of compiler generated type on client side. For that what we need is specialization of these types on client side uses `MethodTable` exported by library. So, let's have a look at the specialization of `Value<int>`:

**File**: examples/0120-template-classes/exp/__zz_cib_internal/__zz_cib_Class257.h
!INCLUDECODE "examples/0120-template-classes/exp/__zz_cib_internal/__zz_cib_Class257.h" (c++)

Here we have specialization of `Value<int>`, if you notice the definition is very similar to what we see for other classes. There are few differences though:
  1. Template class specialization is present in somewhat _hidden_ file, and
  2. All methods are actually templated using `__zz_cib_Dummy` as template parameter with default value. Clients code should not use any template argument when calling methods of template classes. They should use those methods in exactly the same way. `__zz_cib_Dummy` is only to delay specialization until it is used in client code. It is required to avoid circular header dependency.

Now we need this specialization available to client code so that wherever client uses `Value<int>` this specialization should be picked by the compiler instead of concretizing on it's own.

Let's see the content of `value-postdef.h` that is included at the end:

**File**: examples/0120-template-classes/exp/__zz_cib_internal/value-postdef.h
!INCLUDECODE "examples/0120-template-classes/exp/__zz_cib_internal/value-postdef.h" (c++)

There you go, this file has `#include "__zz_cib_Class257.h"` which brings the template specialization of type `Value<int>` to whoever includes `value.h`. So, whenever client code has something like `Value<int>` the library side instance of `Value<int>` is used in the same way as any other regular class is used.

The other `#include "__zz_cib_Class259.h"` is for `Value<float>`.

Now, we will look at what happens when client code uses another class as template parameter instead of built-in type, for example what happens when client code has something like `Value<Int>`. In this case also we need to have a template specialization that uses library exported `MethodTable`. For sake of brevity I am not going to show code anymore, I will just outline how things are done.

For this case also client side glue code has template specialization of `Value<Int>` in file `__zz_cib_internal/__zz_cib_Class258.h`, exactly in the same way it did for previous case. Here also, we want to make sure this specialization is avaliable to the client whenever client code has `Value<Int>`. The specialization gets delivered to the client whenever client code includes `int.h` file, because file `__zz_cib_internal/__zz_cib_Class258.h` is included in `__zz_cib_internal/int-postdef.h` which is included in `exp/int.h`.

So, whenever client code has something like `Value<Int>` the library side instance of `Value<Int>` is used in the same way as any other regular class is used.

# CIB Limitation
This example also demonstrates some limitations of CIB architecture:
  1. As it can be easily seen that library will be exporting all concretized instances of a template class along with all their methods and so code bloat can be expected.
  2. Support of template methods are difficult because all possible usage of templated methods of a class is not possible to know in advance.

This concludes our discussion about how templates can be supported using CIB architecture. As of now `cib` tool supports many other cases of template classes but more
complex case like template template parameters will be supported in future.

