/*
    Generated by cib for ABI compatibility and stability.
*/

#pragma once

#include "__zz_cib_Example-type-converter-base.h"

#include "__zz_cib_Example-class-helper.h"
#include "__zz_cib_Example-class-proxy-detection.h"

namespace __zz_cib_ {

template <typename T>
struct __zz_cib_ProxyClassAbiType
{
  using type = typename T::__zz_cib_AbiType;
};

template <typename T>
struct __zz_cib_ProxyClassAbiType<const T>
{
  using type = const typename T::__zz_cib_AbiType;
};

template <typename T>
using __zz_cib_ProxyClassAbiType_t = typename __zz_cib_ProxyClassAbiType<T>::type;

template <typename T>
class __zz_cib_CoreTypeToAbiType<T, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  T m;

public:
  typename T::__zz_cib_AbiType Convert()
  {
    return __zz_cib_::__zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_ReleaseHandle(&m);
  }

public:
  __zz_cib_CoreTypeToAbiType(T&& x)
    : m(std::move(x))
  {
  }
  __zz_cib_CoreTypeToAbiType(T& x)
    : m(std::move(x))
  {
  }

  operator typename T::__zz_cib_AbiType()
  {
    return Convert();
  }
};

template <typename T>
class __zz_cib_CoreTypeToAbiType<T&, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  T& m;

public:
  typename T::__zz_cib_AbiType Convert() const
  {
    return __zz_cib_::__zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_GetHandle(&m);
  }

public:
  __zz_cib_CoreTypeToAbiType(T& x)
    : m(x)
  {
  }

  operator typename T::__zz_cib_AbiType() const
  {
    return Convert();
  }
};

template <typename T>
class __zz_cib_CoreTypeToAbiType<T&&, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  T& m;

public:
  typename T::__zz_cib_AbiType Convert()
  {
    return __zz_cib_::__zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_GetHandle(&m);
  }

public:
  __zz_cib_CoreTypeToAbiType(T&& x)
    : m(x)
  {
  }

  operator typename T::__zz_cib_AbiType()
  {
    return Convert();
  }
};

template <typename T>
class __zz_cib_CoreTypeToAbiType<T*, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  T* m;

public:
  typename T::__zz_cib_AbiType Convert() const
  {
    return m ? __zz_cib_::__zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_GetHandle(m) : nullptr;
  }

public:
  __zz_cib_CoreTypeToAbiType(T* x)
    : m(x)
  {
  }

  operator typename T::__zz_cib_AbiType() const
  {
    return Convert();
  }
};

template <typename T>
class __zz_cib_CoreTypeToAbiType<T*&&, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  T*&& m;

public:
  auto Convert() const
  {
    return m ? &__zz_cib_::__zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_GetHandle(m) : nullptr;
  }

public:
  __zz_cib_CoreTypeToAbiType(T*&& x)
    : m(std::move(x))
  {
  }

  operator typename T::__zz_cib_AbiType() const
  {
    return Convert();
  }
};

template <typename T>
class __zz_cib_CoreTypeToAbiType<T*&, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  T*&                             m;
  __zz_cib_ProxyClassAbiType_t<T> mHandle;

public:
  auto Convert()
  {
    return &mHandle;
  }

public:
  __zz_cib_CoreTypeToAbiType(T*& x)
    : m(x)
    , mHandle(m ? __zz_cib_::__zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_GetHandle(m) : nullptr)
  {
  }
  ~__zz_cib_CoreTypeToAbiType()
  {
    m = __zz_cib_::__zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_FromHandle(mHandle);
  }

  operator __zz_cib_ProxyClassAbiType_t<T>*()
  {
    return Convert();
  }
};

template <typename T>
class __zz_cib_CoreTypeToAbiType<T* const&, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  T*                              m;
  __zz_cib_ProxyClassAbiType_t<T> mHandle;

public:
  auto Convert()
  {
    return mHandle;
  }

public:
  __zz_cib_CoreTypeToAbiType(T* x)
    : m(x)
    , mHandle(m ? __zz_cib_::__zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_GetHandle(m) : nullptr)
  {
  }

  operator __zz_cib_ProxyClassAbiType_t<T>*()
  {
    return Convert();
  }
};

template <typename T>
class __zz_cib_CoreTypeToAbiType<T**, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  T**                             m;
  __zz_cib_ProxyClassAbiType_t<T> mHandle;

public:
  auto Convert()
  {
    return &mHandle;
  }

public:
  __zz_cib_CoreTypeToAbiType(T** x)
    : m(x)
    , mHandle(m ? __zz_cib_::__zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_GetHandle(*m) : nullptr)
  {
  }
  ~__zz_cib_CoreTypeToAbiType()
  {
    *m = __zz_cib_::__zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_FromHandle(mHandle);
  }

  operator __zz_cib_ProxyClassAbiType_t<T>*()
  {
    return Convert();
  }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
class __zz_cib_AbiTypeToCoreType<T&, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  __zz_cib_AbiType_t<T&> m;

public:
  __zz_cib_AbiTypeToCoreType(__zz_cib_AbiType_t<T&> x)
    : m(x)
  {
  }

  T& Convert() const
  {
    return *__zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_FromHandle(m);
  }

  operator T&() const
  {
    return Convert();
  }
};

template <typename T>
class __zz_cib_AbiTypeToCoreType<T&&, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  __zz_cib_AbiType_t<T&&> m;

public:
  __zz_cib_AbiTypeToCoreType(__zz_cib_AbiType_t<T&&> x)
    : m(x)
  {
  }

  T Convert() const
  {
    return __zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_ObjectFromHandle(m);
  }

  operator T() const
  {
    return Convert();
  }
};

template <typename T>
class __zz_cib_AbiTypeToCoreType<T*, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  __zz_cib_AbiType_t<T*> m;

public:
  __zz_cib_AbiTypeToCoreType(__zz_cib_AbiType_t<T*> x)
    : m(x)
  {
  }

  T* Convert() const
  {
    return __zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_FromHandle(m);
  }

  operator T*() const
  {
    return Convert();
  }
};

template <typename T>
class __zz_cib_AbiTypeToCoreType<T*&, std::enable_if_t<__zz_cib_IsProxyClass_v<T>>>
{
  __zz_cib_AbiType_t<T*&> m;

public:
  __zz_cib_AbiTypeToCoreType(__zz_cib_AbiType_t<T*&> x)
    : m(x)
  {
  }

  T*& Convert()
  {
    return __zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_FromHandle(*m);
  }

  operator T*&()
  {
    return Convert();
  }
};

template <typename T>
class __zz_cib_AbiTypeToCoreType<T, std::enable_if_t<__zz_cib_IsConstructibleProxy_v<T>>>
{
  __zz_cib_AbiType_t<T> m;

public:
  __zz_cib_AbiTypeToCoreType(__zz_cib_AbiType_t<T> x)
    : m(x)
  {
  }

  T Convert() const
  {
    return __zz_cib_Helper<std::remove_cv_t<T>>::__zz_cib_ObjectFromHandle(m);
  }

  operator T() const
  {
    return Convert();
  }
};

} // namespace __zz_cib_
