--- pub/example.h
+++ exp/example.h
@@ -1,75 +1,31 @@
 #pragma once
-
 #include "C.h"
-
 #include <assert.h>
 #include <list>
 #include <vector>
 
+#include "__zz_cib_internal/example-predef.h"
+
 class A
 {
 public:
-  A()
-  {
-    vectorObj_.emplace_back(3);
-    vectorObj_.emplace_back(9);
-
-    for (int i = 0; i < 10000; ++i)
-      largeVector_.emplace_back(i);
-
-    objList_.emplace_back(19);
-    objList_.emplace_back(29);
-
-    vectorOfListOfObjPtr_ = {std::list({new C(10), new C(20)}), std::list({new C(11), new C(21)})};
-  }
+  A(A&& rhs);
+public:
+  A(const A&);
+  A();
   ~A();
-
   typedef std::vector<C>::iterator               iterator;
- 
-public:
-  std::vector<C> g() const {
-    std::vector<C> ret;
-    ret.emplace_back(11);
-    ret.emplace_back(101);
-    return ret;
-  }
-
-  std::vector<C> getLargeVector() const {
-    return largeVector_;
-  }
-
-  std::vector<C*> getObjPtrVec() const {
-    return vectorObjPtr_;
-  }
-
-  int sumInLargeVector() const {
-    int s = 0;
-    for (const auto& c : largeVector_) {
-       s += c.f();
-    }
-    return s;
-  }
-  iterator i() {
-    return vectorObj_.begin();
-  }
-  std::vector<C>::reverse_iterator r() {
-    auto itr = vectorObj_.rbegin();
-    assert(itr->f() == 9);
-    return itr;
-  }
-
-  std::list<C> l() const {
-    return objList_;
-  }
-
-  std::vector<std::list<C*>> vl() const {
-    return vectorOfListOfObjPtr_;
-  }
+  std::vector<C> g() const;
+  std::vector<C> getLargeVector() const;
+  std::vector<C*> getObjPtrVec() const;
+  int sumInLargeVector() const;
+  iterator i();
+  std::vector<C>::reverse_iterator r();
+  std::list<C> l() const;
+  std::vector<std::list<C*>> vl() const;
 
 private:
-  std::vector<C> vectorObj_;
-  std::vector<C> largeVector_;
-  std::vector<C*> vectorObjPtr_;
-  std::list<C> objList_;
-  std::vector<std::list<C*>> vectorOfListOfObjPtr_;
+  __ZZ_CIB_PROXY_CLASS_INTERNALS(A, A);
 };
+
+#include "__zz_cib_internal/example-postdef.h"
