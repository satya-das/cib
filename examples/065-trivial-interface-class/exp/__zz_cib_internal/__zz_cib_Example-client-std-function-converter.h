/*
    Generated by cib for ABI compatibility and stability.
    For copyright details refer to the copyright statement of library that contains this file.
*/

#pragma once

#include "__zz_cib_Example-client-default-type-converter.h"
#include "__zz_cib_Example-decl.h"

namespace __zz_cib_ {

template <typename R, typename... Args>
class __zz_cib_ClientTypeToAbiType<std::function<R(Args...)>>
{
  std::function<R(Args...)>& m;

public:
  using Func = std::function<R(Args...)>;
  using Proc = __zz_cib_AbiType_t<R>(__zz_cib_decl*)(void*, __zz_cib_AbiType_t<Args>...);
  struct ProcData
  {
    Proc  proc;
    void* data;
  };

  ProcData convert() const
  {
    auto proc = [](void* data, __zz_cib_AbiType_t<Args>... args) -> __zz_cib_AbiType_t<R> {
      auto& func = *static_cast<Func*>(data);
      return __zz_cib_ToAbiType<R>(func(__zz_cib_FromAbiType<Args>(args)...));
    };

    void* data = static_cast<void*>(&m);
    return ProcData{proc, data};
  }

public:
  __zz_cib_ClientTypeToAbiType(std::function<R(Args...)>& x)
    : m(x)
  {
  }

  operator ProcData() const
  {
    return convert();
  }
};

} // namespace __zz_cib_
