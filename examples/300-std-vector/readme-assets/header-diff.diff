--- pub/example.h
+++ exp/example.h
@@ -1,63 +1,33 @@
 #pragma once
-
 #include "C.h"
-
 #include <assert.h>
 #include <vector>
 
+#include "__zz_cib_internal/example-predef.h"
+
 class A
 {
 public:
-  A()
-  {
-    vectorObj_.emplace_back(3);
-    vectorObj_.emplace_back(9);
-
-    for (int i = 0; i < 1000000; ++i)
-      largeVector_.emplace_back(i);
-  }
+  A(A&& rhs);
+public:
+  A(const A& );
+  A();
   ~A();
-
     //  typedef PdfObject                                       value_type;
     // typedef value_type &                                    reference;
     // typedef const value_type &                              const_reference;
     typedef std::vector<C>::iterator               iterator2;
- 
-public:
   // std::vector<int> f() const {
   //   return {2, 3, 9};
   // }
-
-
-public:
-  std::vector<C> g() const {
-    std::vector<C> ret;
-    ret.emplace_back(11);
-    ret.emplace_back(101);
-    return ret;
-  }
-
-  std::vector<C> getLargeVector() const {
-    return largeVector_;
-  }
-
-  int sumInLargeVector() const {
-    int s = 0;
-    for (const auto& c : largeVector_) {
-       s += c.f();
-    }
-    return s;
-  }
-  iterator2 i() {
-    return vectorObj_.begin();
-  }
-  std::vector<C>::reverse_iterator r() {
-    auto itr = vectorObj_.rbegin();
-    assert(itr->f() == 9);
-    return itr;
-  }
+  std::vector<C> g() const;
+  std::vector<C> getLargeVector() const;
+  int sumInLargeVector() const;
+  iterator2 i();
+  std::vector<C>::reverse_iterator r();
 
 private:
-  std::vector<C> vectorObj_;
-  std::vector<C> largeVector_;
+  __ZZ_CIB_PROXY_CLASS_INTERNALS(A, A);
 };
+
+#include "__zz_cib_internal/example-postdef.h"
