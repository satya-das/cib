--- pub/example.h
+++ exp/example.h
@@ -1,53 +1,45 @@
+#include "__zz_cib_internal/example-predef.h"
+
 //! An abstract class that is an interface and also a facade.
 //! It is to illustrate how methods with various access types
 //! are exported and imported using CIB architecture.
 class IF
 {
+public:
+  IF(IF&& rhs);
 private:
-  virtual int PrivatePureVirtual() = 0;
-  virtual int PrivateVirtual()      { return 100; }
-  int         PrivateNonVirtual()   { return 200; }
-
 protected:
   virtual int ProtectedPureVirtual() = 0;
-  virtual int ProtectedVirtual()    { return 300; }
-  int         ProtectedNonVirtual() { return 400; }
-
+  virtual int ProtectedVirtual();
+  int ProtectedNonVirtual();
 public:
   virtual int PublicPureVirtual() = 0;
-  virtual int PublicVirtual()       { return 500; }
-
-public:
-  int PublicNonVirtual()
-  {
-    return PublicPureVirtual() +
-      PublicVirtual() +
-      ProtectedPureVirtual() +
-      ProtectedVirtual() +
-      ProtectedNonVirtual() +
-      PrivatePureVirtual() +
-      PrivateVirtual() +
-      PrivateNonVirtual();
-  }
+  virtual int PublicVirtual();
+  int PublicNonVirtual();
+  virtual ~IF();
+protected:
+  IF();
 
-  virtual ~IF() {}
+private:
+  __ZZ_CIB_PROXY_CLASS_INTERNALS(IF, IF);
 };
 
 //! Class that has methods to make class IF interface and facade.
 class A
 {
 public:
+  A(A&& rhs);
+public:
+  A(const A& );
+  ~A();
   A();
-
   //! Makes IF an interface class
-  int SetIF(IF* pIF)
-  {
-    return pIF->PublicNonVirtual();
-  }
-
+  int SetIF(IF* pIF);
   //! Makes IF a facade class.
-  IF* GetIF() const
-  {
-    return nullptr;
-  }
+  IF* GetIF() const;
+
+private:
+  __ZZ_CIB_PROXY_CLASS_INTERNALS(A, A);
 };
+
+#include "__zz_cib_internal/example-postdef.h"
