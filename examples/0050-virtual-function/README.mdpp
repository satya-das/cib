## Example - Virtual Function

In this example we will see what CIB does with virtual functions and how runtime polymorphism works across component boundary. Consider the following example:

!INCLUDECODE "examples/0050-virtual-function/pub/example.h" (c++)

This example defines 2 classes, `class A` has a virtual method. `class B` inherits from `class A` and overrides the virtual method. We will see how runtime polymorphism works across the component boundary.

Let's now run CIB:

**Running cib**

```sh
cib --input-folder pub/ --output-folder exp/ --bind-folder cib/ --module Example
```

Below is what client of library can expect. It is trivial and there is no surprise but it is being done in **ABI compatible and stable** way.

!INCLUDECODE "examples/0050-virtual-function/src/example-client.cpp" (c++)

I am skipping to show generated code but glue code is very similar to what we have seen in previous examples. Glue code doesn't differentiate if the function is virtual (well, largely if we ignore some subtlety which we will see later).

We see that runtime polymorphism works across component bounary. I hope you paid attention to the comment in above code: **// Compiler generated instruction will effectively call `pA->B::VirtFunc()`**.
The instruction generated for client-code takes the decision which virtual function needs to be called. Once the function of respective class is called then only MethodTable comes in play and makes the cross component call. In that ways the virtual table of one component isn't used by another component. Both components have virtual tables of their own. **This is the crux of the ABI compatibility: don't share internals with other components.**

### Things to note about MethodTable
1. MethodTable is NOT replacement of virtual table.
2. MethodTable is just a mechanism to make cross commponent calls.
3. MethodTable does NOT inherit.

In making runtime polymorphism work we do need virtual table, MethodTable only ensures that cross component function call happens in ABI stable and compiler independent way. Another very immprotant point is that MethodTable does not inherit. MethodTable of a class is independent of MethodTable of any of it's parent class. That's way we ensure stability, otherwise MethodTable will suffer from same instability issue of virtual table.

That's it about this example. We will see more detail and power of CIB in following examples.

