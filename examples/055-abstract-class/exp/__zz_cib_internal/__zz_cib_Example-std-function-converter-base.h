/*
    Generated by cib for ABI compatibility and stability.
    For copyright details refer to the copyright statement of library that contains this file.
*/

#pragma once

namespace __zz_cib_ {

template <typename R, typename... Args>
struct __zz_cib_StdFuncConverterBase
{
  using Func = std::function<R(Args...)>;
  using Proc = __zz_cib_AbiType_t<R>(__zz_cib_decl*)(void*, __zz_cib_AbiType_t<Args>...);

  struct ProcData
  {
    Proc  proc;
    void* data;
  };
};

template <typename R, typename... Args>
class __zz_cib_StdFuncToAbiType
{
  using Func     = typename __zz_cib_StdFuncConverterBase<R, Args...>::Func;
  using Proc     = typename __zz_cib_StdFuncConverterBase<R, Args...>::Proc;
  using ProcData = typename __zz_cib_StdFuncConverterBase<R, Args...>::ProcData;

  std::function<R(Args...)>& m;

public:
  ProcData convert() const
  {
    auto proc = [](void* data, __zz_cib_AbiType_t<Args>... args) -> __zz_cib_AbiType_t<R> {
      auto& func = *static_cast<Func*>(data);
      return __zz_cib_ToAbiType<R>(func(__zz_cib_FromAbiType<Args>(args)...));
    };

    void* data = static_cast<void*>(&m);
    return ProcData{proc, data};
  }

public:
  __zz_cib_StdFuncToAbiType(std::function<R(Args...)>& x)
    : m(x)
  {
  }

  operator ProcData() const
  {
    return convert();
  }
};

/////////////////////////////////////////////////////////////////////////////////////////////

template <typename R, typename... Args>
class __zz_cib_AbiTypeToStdFunc
{
  using Func     = typename __zz_cib_StdFuncConverterBase<R, Args...>::Func;
  using Proc     = typename __zz_cib_StdFuncConverterBase<R, Args...>::Proc;
  using ProcData = typename __zz_cib_StdFuncConverterBase<R, Args...>::ProcData;

  ProcData m;

public:
  __zz_cib_AbiTypeToStdFunc(const __zz_cib_AbiType_t<Func>& x)
    : m{x.proc, x.data}
  {
  }

  Func convert() const
  {
    return [m = this->m](Args... args) -> R {
      return __zz_cib_FromAbiType<R>(m.proc(m.data, __zz_cib_ToAbiType<Args>(args)...));
    };
  }

  operator Func() const
  {
    return convert();
  }
};

} // namespace __zz_cib_
