#include <type_traits>

namespace std {
template <typename T /*, typename _Alloc = std::allocator<T>*/>
class vector
{
public:
  using value_type             = T;
  using pointer                = T*;
  using iterator               = __zz_cib_stl_helpers::vector_iterator<T>;
  using const_iterator         = __zz_cib_stl_helpers::vector_iterator<const T>;
  using reverse_iterator       = __zz_cib_stl_helpers::vector_reverse_iterator<T>;
  using const_reverse_iterator = __zz_cib_stl_helpers::vector_reverse_iterator<const T>;
  using reference              = __zz_cib_stl_helpers::vector_iterator<T>::reference;
  using const_reference        = __zz_cib_stl_helpers::vector_iterator<T>::const_reference;
  using size_type              = size_t;

public:
  // construct/copy/destroy
  vector();
  explicit vector(size_type n);
  vector(size_type n, const T& value);
  vector(const vector& x);
  vector(vector&&) noexcept;
  ~vector();
  vector& operator=(const vector& x);
  vector& operator=(vector&& x) noexcept;
  void    assign(size_type n, const T& u);

  // iterators
  iterator               begin() noexcept;
  const_iterator         begin() const noexcept;
  iterator               end() noexcept;
  const_iterator         end() const noexcept;
  reverse_iterator       rbegin() noexcept;
  const_reverse_iterator rbegin() const noexcept;
  reverse_iterator       rend() noexcept;
  const_reverse_iterator rend() const noexcept;

  const_iterator         cbegin() const noexcept;
  const_iterator         cend() const noexcept;
  const_reverse_iterator crbegin() const noexcept;
  const_reverse_iterator crend() const noexcept;

  // capacity
  bool      empty() const noexcept;
  size_type size() const noexcept;
  size_type max_size() const noexcept;
  size_type capacity() const noexcept;
  void      resize(size_type sz);
  void      resize(size_type sz, const T& c);
  void      reserve(size_type n);
  void      shrink_to_fit();

  // element access
  reference       operator[](size_type n);
  const_reference operator[](size_type n) const;
  const_reference at(size_type n) const;
  reference       at(size_type n);
  reference       front();
  const_reference front() const;
  reference       back();
  const_reference back() const;

  // data access
  T*       data() noexcept;
  const T* data() const noexcept;

  // modifiers
  void push_back(const T& x);
  void push_back(T&& x);
  void pop_back();

  iterator insert(const_iterator position, const T& x);
  iterator insert(const_iterator position, T&& x);
  iterator insert(const_iterator position, size_type n, const T& x);
  iterator erase(const_iterator position);
  iterator erase(const_iterator first, const_iterator last);
  void     swap(vector&) noexcept;
  void     clear() noexcept;
};

} // namespace std
